call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter' " Git integration
Plug 'chriskempson/base16-vim' " 16 color theming
Plug 'sheerun/vim-polyglot' " Syntax highlighting
Plug 'christoomey/vim-tmux-navigator' " Shortcuts for navigating tmux windows
Plug 'preservim/nerdtree' " File explorer
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Autocompletion
Plug 'vim-syntastic/syntastic' " Syntax checking
Plug 'rust-lang/rust.vim' " Rust language support

call plug#end()

" Use the base16 theme
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif

set nocompatible

" Enable syntax highlighting
syntax on

" Use the system clipboard
set clipboard=unnamedplus

" Increase update rate
set updatetime=300

" Undo Stuff
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile

" Don't wrap text
set nowrap

" Highlight the current line
set cursorline

" Enable Line Numbers
set number

" Set tab width
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab

" Enable mouse
set mouse=a

" Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 5
let g:syntastic_stl_format = "[%E{Errors: %e (%fe)}%B{, }%W{Warnings: %w (%fw)}]"

highlight SyntasticWarning cterm=undercurl
highlight SyntasticError cterm=undercurl ctermbg=1

" Autocomplete with dictionary words when spell check is enabled
set complete+=kspell

" Use tab for trigger completion with characters ahead and navigate
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Enable spellchecking and linewrapping for Markdown and Latex documents
au BufRead,BufNewFile *.md setlocal spell wrap linebreak textwidth=0
au BufRead,BufNewFile *.tex setlocal spell wrap linebreak textwidth=0

" Stop line numbers from being displayed in terminals
au TermOpen * setlocal nonumber norelativenumber

" If Vim is started without file arguments open NERDTree
au StdinReadPre * let s:std_in=1
au VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

" An easy way to open the file explorer
nnoremap <leader>pv :NERDTree<CR>

" Use escape to enter normal mode from terminal mode
tnoremap <Esc> <C-\><C-N>

" Provide window navigation from terminal mode without switching modes
tnoremap <C-J> <C-\><C-N><C-W><C-J>
tnoremap <C-K> <C-\><C-N><C-W><C-K>
tnoremap <C-L> <C-\><C-N><C-W><C-L>
tnoremap <C-H> <C-\><C-N><C-W><C-H>

" Natural splits
set splitbelow
set splitright

" Italicize comments
highlight Comment cterm=italic

" Change the highlight color for spellcheck
highlight clear SpellBad
highlight SpellBad cterm=undercurl ctermfg=3
